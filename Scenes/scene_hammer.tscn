[gd_scene load_steps=18 format=3 uid="uid://o74rb2cxa26r"]

[ext_resource type="PackedScene" uid="uid://ryvkkr701wml" path="res://Scenes/BG.tscn" id="1_blmxy"]
[ext_resource type="Texture2D" uid="uid://dxmubtmosnb3q" path="res://Sprites/Scenes/Scene 3/Hammer.png" id="1_f3t26"]
[ext_resource type="Texture2D" uid="uid://dre04j536mhtv" path="res://Sprites/Scenes/Scene 3/Plank.png" id="2_pctwq"]
[ext_resource type="Material" uid="uid://6y43sq8kn8cj" path="res://Shader/pixel_shader_material.tres" id="2_vlct1"]
[ext_resource type="Texture2D" uid="uid://6frwlets6t7" path="res://Sprites/Scenes/Scene 3/Nail1.png" id="3_2jchq"]
[ext_resource type="Texture2D" uid="uid://bge4u4j8bjcde" path="res://Sprites/Scenes/Scene 3/Board front.png" id="4_6qhu1"]
[ext_resource type="Texture2D" uid="uid://cfqjnlwxjm6w7" path="res://Sprites/Scenes/Scene 3/Nail Broken2.png" id="5_187au"]
[ext_resource type="Texture2D" uid="uid://cy6j0f0njwu4l" path="res://Sprites/Scenes/Scene 3/Nail Broken1.png" id="6_hgd88"]
[ext_resource type="PackedScene" uid="uid://btom87k2ao2y2" path="res://Ui/hud.tscn" id="8_j1b6l"]

[sub_resource type="GDScript" id="GDScript_bnowi"]
script/source = "extends Control

var nail_hit_count = 0
var is_swingback = false
var vec_force = Vector2 (-100,100)

#func _ready():
	#$Nail/BrokenNail/RigidBody2D.freeze = false
	#$Nail/BrokenNail/RigidBody2D.apply_central_force ( vec_force )
	#$Nail/BrokenNail/RigidBody2D.apply_torque ( 5000.0 )
	#$Nail/BrokenNail/RigidBody2D.linear_velocity.y =  -100

func _on_area_2d_area_exited(area):
	is_swingback = true

func _on_area_2d_area_shape_entered(area_rid, area, area_shape_index, local_shape_index):
	if (is_swingback == true and nail_hit_count < 5 ):
		$Nail.position.y +=4
		is_swingback = false
		nail_hit_count += 1
		if (nail_hit_count == 4):
			unfreeze_nail.call_deferred()
			break_nail.call_deferred()
			$Hud/HudButtons/Next.visible = true

func unfreeze_nail():
	$Nail/BrokenNail.visible = true
	$Nail/BrokenNail/RigidBody2D.freeze = false
	
func break_nail():
	$Nail/Nail1.visible = false
	$Nail/BrokenNail.visible = true
	$Nail/BrokenNail/RigidBody2D.apply_central_force ( vec_force )
	$Nail/BrokenNail/RigidBody2D.apply_torque ( 50000.0 )
	$Nail/BrokenNail/RigidBody2D.linear_velocity.x =  -80
	$Nail/BrokenNail/RigidBody2D.linear_velocity.y =  -300
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_xe4ai"]
size = Vector2(153.161, 123.873)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_y561h"]
size = Vector2(20, 2)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_2ikfp"]
size = Vector2(7, 39)

[sub_resource type="CircleShape2D" id="CircleShape2D_ty2xj"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_5kc4p"]
size = Vector2(17.0968, 8.95834)

[sub_resource type="GDScript" id="GDScript_vslfc"]
script/source = "extends RigidBody2D


@onready var mouse_pin: PinJoint2D = $PinJoint2D
@onready var fake_body: StaticBody2D = $PinJoint2D/StaticBody2D
@onready var rigid_body_2d: RigidBody2D = $\".\"


var rotation_min = - 0.2
var rotation_max = 0.2

var is_dragging = false
var is_mouse_inside = true


func _ready() -> void:
	# Set the node_a to a static body without a collision, we only need it for the pin effect.
	mouse_pin.node_a = mouse_pin.get_path_to(fake_body)
	# Enable input pickable on the rigid body to be able to detect mouse clicks
	rigid_body_2d.input_pickable = true


func _physics_process(delta: float) -> void:
	mouse_pin.global_position = get_global_mouse_position()


func _process(delta: float) -> void:
	# If we aren't dragging and a mouse button press happens then
	if not is_dragging :
		rigid_body_2d.freeze = true
		#rigid_body_2d.freeze = true
		# Clear the node_b path
		mouse_pin.node_b = NodePath()
		# Reset the angular damp to 0
		rigid_body_2d.angular_damp = 0
		# Or unlock the rotation of the rigid body with
#		rigid_body_2d.lock_rotation = false
	else:
		if not is_mouse_inside:
			is_dragging = false
		
		if rigid_body_2d.rotation > rotation_max:
			rigid_body_2d.rotation +0.1
		if rigid_body_2d.rotation < rotation_min:
			rigid_body_2d.rotation -0.1
		
		if rigid_body_2d.rotation == rotation_max+0.1:
			rigid_body_2d.rotation =rotation_max+0.1
		if rigid_body_2d.rotation == rotation_min-0.1:
			rigid_body_2d.rotation = rotation_min-0.1
		#rigid_body_2d.linear_velocity = rigid_body_2d.linear_velocity.limit_length(max_speed)
			
		rigid_body_2d.freeze = false
		# Set the node_b to the rigid body that triggered this input event
		mouse_pin.node_b = mouse_pin.get_path_to(rigid_body_2d)
		# Up the angular damp to avoid rotating like crazy when moving the mouse
		rigid_body_2d.angular_damp = 20
		# You can also lock the rotation of the rigid body with
#		rigid_body_2d.lock_rotation = true

func _notification(blah):
	match blah:
		NOTIFICATION_WM_MOUSE_EXIT:
			is_mouse_inside = false
		NOTIFICATION_WM_MOUSE_ENTER:
			is_mouse_inside = true
			
func _on_button_button_down():
	is_dragging = true

func _on_button_button_up():
	is_dragging = false

"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_7mkqr"]
size = Vector2(1.01223, 30.8983)

[node name="Scene_Hammer" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_bnowi")

[node name="BG" parent="." instance=ExtResource("1_blmxy")]
layout_mode = 1

[node name="Plank" type="Sprite2D" parent="."]
texture_filter = 2
material = ExtResource("2_vlct1")
position = Vector2(327.5, 311)
texture = ExtResource("2_pctwq")

[node name="Area2D" type="Area2D" parent="."]
position = Vector2(228, 234)
scale = Vector2(1.5376, 0.9216)
collision_layer = 4
collision_mask = 4
input_pickable = false

[node name="HammerExitArea" type="CollisionShape2D" parent="Area2D"]
shape = SubResource("RectangleShape2D_xe4ai")

[node name="Nail" type="Node2D" parent="."]
position = Vector2(222.5, 270)

[node name="Nail1" type="Sprite2D" parent="Nail"]
texture_filter = 2
material = ExtResource("2_vlct1")
texture = ExtResource("3_2jchq")

[node name="StaticBody2D" type="StaticBody2D" parent="Nail/Nail1"]
collision_layer = 3
collision_mask = 3

[node name="NailBody1" type="CollisionShape2D" parent="Nail/Nail1/StaticBody2D"]
position = Vector2(-3.5, -16)
shape = SubResource("RectangleShape2D_y561h")

[node name="NailBody2" type="CollisionShape2D" parent="Nail/Nail1/StaticBody2D"]
position = Vector2(-3, 4.5)
shape = SubResource("RectangleShape2D_2ikfp")

[node name="BrokenNail" type="Node2D" parent="Nail"]
visible = false

[node name="RigidBody2D" type="RigidBody2D" parent="Nail/BrokenNail"]
collision_layer = 5
collision_mask = 5
gravity_scale = 0.515
freeze = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="Nail/BrokenNail/RigidBody2D"]
position = Vector2(-3.5, -18)
shape = SubResource("CircleShape2D_ty2xj")

[node name="NailBroken1" type="Sprite2D" parent="Nail/BrokenNail/RigidBody2D"]
light_mask = 2
visibility_layer = 2
z_index = 1
texture_filter = 2
material = ExtResource("2_vlct1")
position = Vector2(-2.5, -14)
texture = ExtResource("6_hgd88")

[node name="NailBroken2" type="Sprite2D" parent="Nail/BrokenNail"]
texture_filter = 2
material = ExtResource("2_vlct1")
position = Vector2(0.5, 6)
texture = ExtResource("5_187au")

[node name="Area2D" type="Area2D" parent="Nail"]
position = Vector2(-3.10001, -20.7)
scale = Vector2(1.24, 0.96)
collision_layer = 8
collision_mask = 8
input_pickable = false

[node name="NailHit" type="CollisionShape2D" parent="Nail/Area2D"]
position = Vector2(0, 1.04166)
shape = SubResource("RectangleShape2D_5kc4p")

[node name="PinJoint2D" type="PinJoint2D" parent="."]
position = Vector2(219.5, 290)

[node name="BoardFront" type="Sprite2D" parent="."]
texture_filter = 2
material = ExtResource("2_vlct1")
position = Vector2(328.5, 313)
texture = ExtResource("4_6qhu1")

[node name="Hammer" type="RigidBody2D" parent="."]
z_index = 1
position = Vector2(441, 276)
mass = 0.01
gravity_scale = 0.0
center_of_mass_mode = 1
center_of_mass = Vector2(5.53, 0)
freeze = true
script = SubResource("GDScript_vslfc")

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Hammer"]
polygon = PackedVector2Array(87, -1, -68, 0, -73, -10, -63, -26, -81, -23, -86, -12, -87, 23, -80, 26, -75, 26, -70, 23, -69, 12, -59, 14, 87, 14, 89, 8)

[node name="Area2D" type="Area2D" parent="Hammer"]
position = Vector2(-76.9999, 11)
scale = Vector2(18.7704, 1.96188)
collision_layer = 12
collision_mask = 12
input_pickable = false

[node name="HammerHitArea" type="CollisionShape2D" parent="Hammer/Area2D"]
position = Vector2(0, -5.44915)
scale = Vector2(1.44112, 1)
shape = SubResource("RectangleShape2D_7mkqr")

[node name="Hammer" type="Sprite2D" parent="Hammer"]
texture_filter = 2
material = ExtResource("2_vlct1")
texture = ExtResource("1_f3t26")

[node name="Button" type="Button" parent="Hammer"]
modulate = Color(1, 1, 1, 0)
self_modulate = Color(1, 1, 1, 0)
offset_left = -86.0
offset_top = -1.0
offset_right = -77.0
offset_bottom = 7.0
scale = Vector2(19.5304, 1.96188)
metadata/_edit_use_anchors_ = true

[node name="PinJoint2D" type="PinJoint2D" parent="Hammer"]
position = Vector2(-1, 5)

[node name="StaticBody2D" type="StaticBody2D" parent="Hammer/PinJoint2D"]

[node name="Hud" parent="." instance=ExtResource("8_j1b6l")]
layout_mode = 1

[connection signal="area_entered" from="Area2D" to="." method="_on_area_2d_area_entered"]
[connection signal="area_exited" from="Area2D" to="." method="_on_area_2d_area_exited"]
[connection signal="area_shape_exited" from="Area2D" to="." method="_on_area_2d_area_shape_exited"]
[connection signal="body_exited" from="Area2D" to="." method="_on_area_2d_body_exited"]
[connection signal="body_shape_exited" from="Area2D" to="." method="_on_area_2d_body_shape_exited"]
[connection signal="area_entered" from="Nail/Area2D" to="." method="_on_area_2d_area_entered"]
[connection signal="area_shape_entered" from="Nail/Area2D" to="." method="_on_area_2d_area_shape_entered"]
[connection signal="body_entered" from="Nail/Area2D" to="." method="_on_area_2d_body_entered"]
[connection signal="body_shape_entered" from="Nail/Area2D" to="." method="_on_area_2d_body_shape_entered"]
[connection signal="button_down" from="Hammer/Button" to="Hammer" method="_on_button_button_down"]
[connection signal="button_up" from="Hammer/Button" to="Hammer" method="_on_button_button_up"]
